name: Python CI/CD Workflow

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'  # Change to your Python version

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Replace with your requirements file

      - name: Run Tests
        run: |
          pytest test_app.py  # Replace with your test file name
     
  deploy:
    runs-on: ubuntu-latest
    steps:         
    - name: deployment step
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: | 
          cd /home/ubuntu/
          git clone git@github.com:sayanalokesh/GithubActions.git
          cd GithubActions
          sudo ls
          sudo git checkout staging
          echo "checked out to staging branch"
          sudo git pull
          echo "pull has been successful"
          sudo apt install -y python3-pip
          sudo pip install flask
          sudo pip install gunicorn
          
          sudo gunicorn -w 4 -b 0.0.0.0:8000 app.py:app &
          echo "app is up and running fine"
          sudo git checkout production
          echo "checked out to production branch"
          sudo git pull
          echo "pull has been successful"
          sudo git merge staging
          echo "merge successful"
          sudo git push origin production
          echo "pushed to production"
          sudo git tag -a v1.0
          sudo git push origin v1.0
          # sudo python3 /home/ubuntu/Jenkins/app.py
          

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST1 }}  # Replace with your production server IP
          username: ${{ secrets.EC2_USERNAME }}  # Replace with your SSH username
          key: ${{ secrets.EC2_SSH_KEY }}  # Replace with your SSH private key
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu/
            git clone https://github.com/sayanalokesh/GithubActions.git
            sudo git checkout production
            sudo apt install -y python3-pip
            sudo pip install flask
            sudo pip install gunicorn
            sudo gunicorn -w 4 -b 0.0.0.0:8000 app.py:app &
          # sudo python3 /home/ubuntu/Jenkins/app.py# Commands to deploy to production server
            # ssh -i ${{secrets.EC2_SSH_KEY}} ubuntu@ec2-52-66-160-84.ap-south-1.compute.amazonaws.com "ls"  # "cd /home/ubuntu && git pull origin staging && sudo systemctl restart jenkins"


# on:
#   push:
#     branches:
#       - staging

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install dependencies
#         run: |
#           sudo apt update
#           sudo apt install -y python3-pip
#           sudo pip install -r requirements.txt

#   test:
#     runs-on: ubuntu-latest
#     needs: build

#     outputs:
#       tests_passed: ${{ steps.test_result.outputs.tests_passed }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install dependencies
#         run: |
#           sudo apt update
#           sudo apt install -y python3-pip
#           sudo pip install -r requirements.txt

#       - name: Run tests
#         id: test_result
#         run: |
#           # Execute your testing scripts, assuming pytest is used
#           pytest test_app.py
#           echo "::set-output name=tests_passed::true"  # Set the output if tests pass
#         continue-on-error: true  # Continue even if tests fail

#   deploy:
#     runs-on: ubuntu-latest
#     needs: test
#     if: github.event_name == 'push' && github.ref == 'refs/heads/staging' && needs.test.outputs.tests_passed == 'true'

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Upload SSH private key
#       uses: actions/upload-artifact@v3
#       with:
#         name: ssh-private-key
#         path: ${{ secrets.EC2_SSH_KEY }}

#     - name: Check SSH private key
#       run: |
#         cat ~/.ssh/id_rsa

#     - name: Change SSH private key permissions
#       run: |
#         chmod 600 ~/.ssh/id_rsa
#         echo "Exit code: $?"
